version: '3.9'
services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - postgres:/data/postgres
    networks:
      - kltn
    ports:
      - "5432:5432"
    restart: unless-stopped

  postgres-notification:
    container_name: postgres-notification
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NOTIFICATION}
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - postgres-notification:/data/postgres
    networks:
      - kltn
    ports:
      - "5433:5432"
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: ${POSTGRES_EXPORTER_URL}
      BASIC_AUTH_USER: sa
      BASIC_AUTH_PASS: admin
    networks:
      - kltn
    links:
      - postgres
      - prometheus
    restart: unless-stopped

  mongo:
    container_name: mongo
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      TZ: Asia/Ho_Chi_Minh
    volumes:
      - mongo:/data/mongo
      - ./:/docker-entrypoint-initdb.d
    networks:
      - kltn
    ports:
      - "27017:27017"
    restart: unless-stopped

#  mongo-exporter:
#    image: bitnami/mongodb-exporter
#    container_name: mongo-exporter
#    ports:
#      - "9216:9216"
#    environment:
#      - MONGODB_URI=${MONGO_URI_PROMETHEUS}
#    networks:
#      - kltn
#    links:
#      - mongo
#      - prometheus

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kltn
    volumes:
      - zookeeper:/var/lib/zookeeper
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "notification-topic:1:1"
    networks:
      - kltn
    volumes:
      - kafka:/var/lib/kafka
    depends_on:
      - zookeeper
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data
    networks:
      - kltn

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    networks:
      - kltn
    volumes:
      - ./storage:/data

  eureka:
    container_name: eureka
    build:
      context: ../eureka
    image: tuank230194/kltn:eureka
    environment:
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "8761:8761"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - kltn
    volumes:
      - grafana_storage:/var/lib/grafana

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - kltn
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_storage:/prometheus

  config-service:
    container_name: config-service
    build:
      context: ../config-service
    image: tuank230194/kltn:config-service
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - EUREKA_URL=${EUREKA_URL}
      - MONGO_URI=${MONGO_URI_CONFIG}
      - SECRET=${SECRET}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "8888:8888"
    restart: unless-stopped
    depends_on:
      - postgres
      - mongo
      - eureka

  gateway:
    container_name: gateway
    build:
      context: ../gateway
    image: tuank230194/kltn:gateway
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - CONFIG_PROFILE=${CURRENT_PROFILE}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - config-service

  auth-service:
    container_name: auth-service
    build:
      context: ../auth-service
    image: tuank230194/kltn:auth-service
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - CONFIG_PROFILE=${CURRENT_PROFILE}
      - MONGO_URI=${MONGO_URI_AUTH}
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      - gateway

  file-service:
    container_name: file-service
    build:
      context: ../file-service
    image: tuank230194/kltn:file-service
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - CONFIG_PROFILE=${CURRENT_PROFILE}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "9003:9003"
    links:
      - minio
    restart: unless-stopped
    depends_on:
      - gateway

  individual-service:
    container_name: individual-service
    build:
      context: ../individual-service
    image: tuank230194/kltn:individual-service
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - CONFIG_PROFILE=${CURRENT_PROFILE}
      - POSTGRES_URL=${POSTGRES_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TIME_TO_LIVE=${REDIS_TIME_TO_LIVE}
      - KAFKA_URL=${KAFKA_URL}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "9002:9002"
    restart: unless-stopped
    depends_on:
      - gateway

  notification:
    container_name: notification
    build:
      context: ../notification
    image: tuank230194/kltn:notification
    environment:
      - eureka.client.service-url.defaultZone=${EUREKA_URL}
      - TZ=Asia/Ho_Chi_Minh
      - CURRENT_PROFILE=${CURRENT_PROFILE}
      - CONFIG_PROFILE=${CURRENT_PROFILE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL_NOTIFICATION=${POSTGRES_URL_NOTIFICATION}
      - KAFKA_URL=${KAFKA_URL}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
    volumes:
      - kltn:/kltn
    networks:
      - kltn
    ports:
      - "9004:9004"
    restart: unless-stopped
    depends_on:
      - gateway

  client:
    build:
      context: ../../client/
    image: tuank230194/kltn:client
    container_name: client
    ports:
      - "4200:80"
    restart: unless-stopped
    networks:
      - kltn


volumes:
  postgres:
  postgres-notification:
  mongo:
  redis:
  kafka:
  zookeeper:
  kltn:
  prometheus_storage:
  grafana_storage:

networks:
  kltn: